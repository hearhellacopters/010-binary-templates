//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: OBJD.bt
//   Authors: Greenf1re, Joschka
//   Version: 2.0
//   Purpose: Object placement in FETH
//  Category: File Format
// File Mask: *.OBJD
//  ID Bytes: 44 4A 42 4F
//   History: 
//------------------------------------------------
LittleEndian();
#include "../Model related formats/G1SharedStructures.bt"

typedef struct HEADER {
    char magic[4];
    short sectionCount;
    short section0EntryCount;
    short section1EntryCount;
    short section2EntryCount;
    short section3EntryCount;
    short padding;    
} Header <bgcolor=cLtRed, name="Header">;

typedef struct SECTIONHEADER {
    int sectionMagic <comment="Section start Magic?">;
    int sectionIndex;
    int sectionSize;
    int reserved;
} SectionHeader <bgcolor=cLtPurple,name="Section Header">;

typedef struct SECTION0ENTRY
{
    FSkip(0x1C);
    float section0Magic;
    FSkip(0x10);//unknown
    ushort sec0_entryID; //entry ID
    ushort sec1_entryID;//sec2Entry calls sec1_entry[sec0[sec2.entryIndex].sec1_entryID]
    short modelCount;//for i : modelCount, instantiate(sec1_entryID + i). 
    FSkip(0x04);
    byte bundleID;
    byte padding2[5];
    
} Section0Entry<size=0x40>;

typedef struct SECTION1ENTRY
{
    FSkip(0x30);
    Vector4 BBoxMin<name="BBox min">;
    Vector4 BBoxMax<name="BBox max">;
    FSkip(0x180);
    ushort g1mID<name="g1m model ID">;

    FSkip(0x12);
    ushort textureH<name="Texture/Material">;//Seems related to sec3.section1_ID
    FSkip(0x04);
    ushort unk1 <comment="mostly FF">;//some sort of index, increments with entries
    ushort collisionLayer <name = "Layer?", comment=" collision type/layer or shape, for example either makes it one-way from left, from right, 0 way, or 2 way">;//0 makes stairs passthrough, 2 makes room boxes unpassable (black boxes over each area). 12 removes colliders for pillars, wall decor, stairs, doors. 
    FSkip(0x5);
    byte modelTag; //4 == stairs (paths w/ stairs), outer walls, some garden stuff, dorm walls, some walls. 3 == trees, some pillars; 1 == doors,furniture, outer structures; 0 == most inner structures + floors
    FSkip(0x13);

    ubyte bundleID<name="bundle ID">;
    ushort entryID<name="entry ID">;
    FSkip(502);
} Section1Entry<size=0x400>;

typedef struct SECTION2ENTRY
{
    Vector4 Scale<name="Scale">;
    Vector4 Rotation<comment="Euler in radians probably",name="Rotation">;
    Vector4 Position<name="Position">;
    short unk0;//animations? has doors, books, banners (cloth-like physics), etc
    FSkip(0x02);
    short entryIndex; //Refers to section 0 entry. Sec0 gives Section 1 which gives model + bundle data + entry Index. Section 2 references just the entry Index to place model in bundle.
    short unk2;
    int unk3;//always 0 except in last 2 entries
    short Map_ID;//ID of target map/level
    short unk5;//always the same value
} Section2Entry<size=0x40>;

typedef struct SECTION3ENTRY
{
    Vector4 Position<name="Position">;
    Vector4 Rotation<comment="Euler in radians probably",name="Rotation">;
    Vector4 Scale<name="Scale">;
    int unk0;
    int entryIndex<name="Entry index ?">;//This is the index for section 2.
    int Map_ID; // ID of target map/level
    int unk2;//probably nothing, haven't looked into it yet
    short entryIndex; //seemed to be the same as Section2Entry.entryIndex.
    short section1_ID;//seems related to sec1.textureH
    int unk6;//unk6,7,8 are probably nothing
    int unk7;
    int unk8;    
} Section3Entry<size=0x50>;

typedef struct SECTION (int s0C, int s1C, int s2C, int s3C){
    SectionHeader sHeader;
    local int32 pos = FTell();
    switch(sHeader.sectionIndex)
    {
        case 0:
            Section0Entry entries[s0C]<name="Entries">;            
            break;
        case 1:
            Section1Entry entries[s1C]<name="Entries">;
            break;
        case 2:
            Section2Entry entries[s2C]<name="Entries">;
            break;
        case 3:
            Section3Entry entries[s3C]<name="Entries">;
            break;
    }
    FSeek(pos + sHeader.sectionSize);
} Section;



struct FILE {
    Header header;
    Section section(header.section0EntryCount,header.section1EntryCount,header.section2EntryCount,header.section3EntryCount) [header.sectionCount+1]<name="Section", optimize=false>;
}File<name="OBJD file", open=true>;
