//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: NUNO.bt
//   Authors: Raytwo, Joschka
//   Version: 1.3
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History:
//  1.3 2020-11-12  Joschka : NUNO4
//  1.2 2020-02-25  Joschka : Updated with more accurate structure
//  1.1 2020-01-01  Joschka : Changed structures, added 0301 and 0302 entries
//  1.0 2019-09-09  Raytwo: Created the file
//------------------------------------------------
#ifndef G1M_NUNO
#define G1M_NUNO

#ifndef G1M_SHAREDSTRUCTURES
#include "../G1SharedStructures.bt"
#endif // G1M_SHAREDSTRUCTURES

#define NUNO5FLAG_SKIP0		(1<<0)
#define NUNO5FLAG_SKIP1		(1<<1)
#define NUNO5FLAG_SKIP2		(1<<2)

typedef struct CONTROLPOINT {
        float X;
        float Y;
        float Z;
        float W;
}ControlPoint<name="ControlPoint">;

typedef struct INFLUENCE {
        int P1;
        int P2;
        int P3;
        int P4;
        float P5;
        float P6;
}Influence<name="Influence">;

typedef struct NUNO2BONESECTION {
    uint16 boneIndex;
    uint16 padding;
    uint32 reserved[3];
    Vector3 coords;
    uint32 padding;
}nuno2BoneSection<name="nuno2Bone", optimize=false>;

typedef struct NUNO4VBoneInfo {
    uint32 id;    
    uint32 unk0;
    uint32 unk1;
    uint32 clonedID;
}nuno4VirtualBoneInfo<name="nuno4VBoneInfo", optimize=false>;

typedef struct NUNO4PARAMSET {
    float param1;    
    uint32 unk0;
    float params2[5];
    uint32 unk1;
    float params3[9];
}nuno4ParamSet<name="nuno4ParamSet", optimize=false>;

typedef struct NUNO4ROTMATRIX {
    float rotationMatrix[9];
}nuno4RotMatrix<name="nuno4RotMatrix", optimize=false>;

typedef struct NUNO4BONE {
    Vector4 coords;
    uint32 chainID;
    float chainPercentage;
    float offsetFromPrevious;
}nuno4Bone<name="nuno4Bone", optimize=false>;

typedef struct NUNO4MAP {
    uint32 id;
    uint32 boneID;
}nuno4Map<name="nuno4Map", optimize=false>;

typedef struct NUNO5CP {
    Vector3 coords<name="local coords",open=true>;
    Vector3 unk<name="unknown coords">;
    int P1;
    int P2;
    int ParentID<name="Parent">;
    int P4;
    int P5;
}nuno5CP<name="nuno5CP">;

typedef struct NUNO5SKIP8 {
    uint entryCount<name="Entry count">;
    uint unk[3];
    //Assert(unk[0] + unk[1] + unk[2] == 1); //See 89a38a71.g1m from SoP for non 1 unk[0]
    uint entries[entryCount];
}nuno5Skip8<name="nuno5Skip8">;

typedef struct UNKSECTION {
}UnkSection<name="Unknown Section",size=0x30>;

typedef struct {
    local int version = G1Helper_GetVersionA(header.version);
    uint32 parentBone<name="Parent Bone">;
    uint32 controlPointsCount<name="Control points count">;
    uint32 unknownSectionCount<name="Unknown section count">;
    uint32 skip1;
    uint32 skip2;
    uint32 skip3;
    FSkip(0x4C); 
    if(version>=25)
        FSkip(0x10);     
    ControlPoint controlPoints[controlPointsCount]<name="Control Point">;
    Influence influences[controlPointsCount]<name="Influence">;
    UnkSection unknownSections[unknownSectionCount]<name="Unknown Section">;
    FSkip((skip1+skip2+skip3) * 4);    
} nunoentry_00030001<name="Entry (0x00030001)", optimize=false>;


typedef struct {
    local int version = G1Helper_GetVersionA(header.version);
    uint32 parentBoneID<name="Parent Bone ID">;
    uint32 unk1;
    uint32 physicsBoneCount;
    uint32 skip1;
    float paramSet1[9];
    uint32 unk<format=hex>;
    float paramSet2[6];
    if(version>=29)
        float paramSet3[3];
    nuno2BoneSection physicsBones[physicsBoneCount];
    FSkip(skip1 * 4); 

} nunoentry_00030002<name="Entry (0x00030002)", optimize=false>;

typedef struct {
    local int version = G1Helper_GetVersionA(header.version);
    uint32 parentBoneID<name="Parent Bone">;
    uint32 controlPointsCount<name="Control points count">;
    uint32 unknownSectionCount<name="Unknown section count">;
    uint32 skip1;
    uint32 unk1;
    uint32 skip2;
    uint32 skip3;
    uint32 skip4;
    if(version<30)
    {
        FSkip(0xA8); //Unknown
        if(version>=25)
            FSkip(0x10);
    }
    else
    {
        FSkip(0x8);
        uint32 offset;
        FSkip(offset-4);
    }
    ControlPoint controlPoints[controlPointsCount]<name="Control Point">;
    Influence influences[controlPointsCount]<name="Influence">;
    UnkSection unknownSections[unknownSectionCount]<name="Unknown Sections">;
    FSkip(skip1 * 4);
    FSkip(skip2 * 8);
    FSkip(skip3 * 12);
    FSkip(skip4 * 8); 
} nunoentry_00030003<name="Entry (0x00030003)", optimize=false>;


typedef struct {
    local int version = G1Helper_GetVersionA(header.version);
    uint32 parentBoneID<name="Parent Bone ID">;
    uint32 totalBoneEntries<name="Total bone entries",comment="physBCount + virtBCount, check 4fd9d728 from HW2">;
    uint32 rotMatrixCount; //number of 36 bytes chunks
    uint32 skip1;
    uint32 physicsBoneCount;
    
    if(version >= 32)
    {
        uint32 virtualBoneCount;
        uint32 unk; //something weird going on with that index, check Yaonamihime
        uint32 reserved[3];
        uint32 offset;
        FSkip(offset-4);
        uint32 unk2; //May be included with the offset above)
        if(virtualBoneCount)
        {
            uint32 unk3;
            uint32 unk4;
        }
    }
    else
    {
        nuno4ParamSet params;        
    }
    
    nuno4RotMatrix rotationMatrices[rotMatrixCount];
    nuno4Bone bone[totalBoneEntries];
    FSkip(skip1 * 4);
    nuno4Map maps[physicsBoneCount];

    if(version >= 32)
    {
        nuno4VirtualBoneInfo virtualBonesInfo[virtualBoneCount];
    }    
    
} nunoentry_00030004<name="Entry (0x00030004)", optimize=false>;

typedef struct {
    uint32 controlPointsCount<name="Control points count">;
    uint32 flags<name="Flags">;
    uint32 skip[9];
    uint32 bUseSkip9;
    //Assert( reserved == 0);
    if (bUseSkip9){
        uint32 skip9Size;
        uint32 skip9Count;
    }
    uint32 CPoffset<name="Control points offset">;
    FSkip(CPoffset-4);

    nuno5CP cps[controlPointsCount]<name="Control points">;
    if (flags & NUNO5FLAG_SKIP0)
        byte flagsSkip0[0x20 * controlPointsCount];
    if (flags & NUNO5FLAG_SKIP1)
        byte flagsSkip1[0x18 * controlPointsCount];
    byte skip0[4*skip[0]];
    byte skip1[12*skip[1]];
    byte skip2[16*skip[2]];
    byte skip3[12*skip[3]];
    byte skip4[8*skip[4]];
    byte skip5[0x30*skip[5]];
    byte skip6[0x48*skip[6]];
    byte skip7[0x20*skip[7]];
    if (flags & NUNO5FLAG_SKIP2)
      byte flagsSkip2[0x4 * controlPointsCount];
    nuno5Skip8 skip8Bis[skip[8]];
    if (bUseSkip9){
    byte skip9[skip9Size*skip9Count];
    }
    
} nunoentry_00030005LOD<name="LOD", optimize=false>;

typedef struct {
    local int version = G1Helper_GetVersionA(header.version);
    uint32 parentBoneID<name="Parent Bone ID">;
    uint32 unk;
    uint32 lodCount<name="LOD count">;
    uint32 unk1[2];
    Assert(!(unk1[0] + unk1[1]));
    ushort entryID<name="Entry id">;
    ushort subsetID<name="Subset id">;
    uint32 unk3[3];
    Assert(!(unk3[0] + unk3[1] + unk3[2]));
    nunoentry_00030005LOD lod[lodCount];
} nunoentry_00030005<name="Entry (0x00030005)", optimize=false>;

typedef struct G1MNUNOSECTION {
    uint32 subSectionCount<name="Subsection count">;
    local int i = 0;
    local int pos = 0;
    local int version = G1Helper_GetVersionA(header.version);
    for (i = 0;i < subSectionCount; i++)
    {   
        pos = FTell();
        struct NUNOSUBCHUNK {
            uint32 flag<name="Subsection type", format=hex>;
            uint32 subsection_size<name="Subsection size", format=hex>;
            uint32 entry_count<name="Entry count">;
            switch(flag)
            {
                case 0x00030001:
                    nunoentry_00030001 entries[entry_count];
                    break;
                case 0x00030002:
                    nunoentry_00030002 entries[entry_count];
                    break;
                case 0x00030003:
                    nunoentry_00030003 entries[entry_count];
                    break;
                case 0x00030004:
                    //nunoentry_00030004 entries[entry_count];
                    break;
                case 0x00030005:
                    if (version >= 35){
                        uint32 reserved<name="Reserved">;
                        Assert(!reserved);
                    }
                    nunoentry_00030005 entries[entry_count];
                    break;
            }
        }NunoSubSection<name="SubSection",optimize=false>; 
        FSeek(pos + NunoSubSection.subsection_size);
    }
}G1MNunoSection<name="NUNOSection",open=true>;

#ifndef G1M_FILELESS
#define G1M_FILELESS

LittleEndian();

struct FILE {
    GResourceSectionHeader header<name="Header">;
    G1MNunoSection data<name="Nuno data">;
} File<name="NUNO", open=true>;

#endif // G1M_FILELESS

#endif // G1M_NUNO